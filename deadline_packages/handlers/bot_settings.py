import logging

from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext

import deadline_packages.keyboards as kb
from deadline_packages.keyboards import clear
from deadline_packages.states import ReminderStates
from deadline_packages.utils import load_reminders, save_reminders

logging.basicConfig(level=logging.INFO)


reminders = load_reminders()

bot_settings_router = Router()


@bot_settings_router.message(F.text.casefold() == '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è'.casefold())
async def settings(message: types.Message):
    await message.answer("–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", reply_markup=kb.settings)

@bot_settings_router.message(F.text.casefold() == '–∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª üóì'.casefold())
async def settings_interval(message: types.Message, state: FSMContext):
    if message.text and message.text.lower() == "–æ—Ç–º–µ–Ω–∞‚ùå":
        await state.clear()
        await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main)
        return
    await state.set_state(ReminderStates.waiting_for_name_settings)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª üóì", reply_markup=clear)

@bot_settings_router.message(ReminderStates.waiting_for_name_settings)
async def enter_name(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞‚ùå":
        await state.clear()
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main)
        return

    name_to_check = message.text.strip()  # –ò–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —á–µ–ª–æ–≤–µ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_exists = False
    for user_id, user_info in reminders.items():
        for reminder in user_info["reminders"]:
            if reminder["name"].lower() == name_to_check.lower():  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–º–µ–Ω–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
                user_exists = True
                break
        if user_exists:
            break

    if not user_exists:
        # –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∏–º–µ–Ω–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=kb.main)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(name=name_to_check)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–≤–≤–æ–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤)
    await state.set_state(ReminderStates.waiting_for_interval_settings)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
                         "–ü—Ä–∏–º–µ—Ä: 1, 7, 30\n"
                         "–≠—Ç–æ –∏–∑–º–µ–Ω–∏—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ç–∞–∫, —á—Ç–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø—Ä–∏–¥—É—Ç –∑–∞ 1, 7, 30 –¥–Ω–µ–π")

@bot_settings_router.message(ReminderStates.waiting_for_interval_settings)
async def enter_interval(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞‚ùå":
        await state.clear()
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main)
        return

    try:
        user_interval_str = str(message.text)
        user_interval = [int(item.strip()) for item in user_interval_str.split(",")]
        user_data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        user_id = str(message.chat.id)
        if user_id not in reminders:
            reminders[user_id] = {"reminders": []}

        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for reminder in reminders[user_id]["reminders"]:
            if reminder["name"] == user_data["name"]:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
                reminder["intervals"] = user_interval  # –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
                break

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        save_reminders(reminders)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await state.clear()
        await message.answer(
            f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è {user_data['name']} –Ω–∞ {user_interval_str} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!",
            reply_markup=kb.main
        )
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 1, 7, 30")