import json
import logging

from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext

import deadline_packages.keyboards as kb
from deadline_packages.keyboards import clear
from deadline_packages.states import ReminderStates
from deadline_packages.utils import load_reminders, save_reminders

logging.basicConfig(level=logging.INFO)


reminders = load_reminders()

admin_router = Router()

# –í—ã–≤–µ—Å—Ç–∏ –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö üìÇ
@admin_router.message(F.text.casefold() == '–í—ã–≤–µ—Å—Ç–∏ –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö üìÇ'.casefold())
async def settings_interval(message: types.Message):

    user_id = str(message.chat.id)
    if user_id not in reminders:
        reminders[user_id] = {"reminders": []}
        output_database = "—É –≤–∞—Å –µ—â—ë –Ω–µ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    else:
        user_data = reminders.get(user_id, {})
        output_database = json.dumps(user_data, ensure_ascii=False, indent=4)

    await message.answer(output_database, reply_markup=kb.main)

@admin_router.message(F.text.casefold() == '—É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å üîí'.casefold())
async def delete_entry(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞‚ùå":
        await state.clear()
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main)
        return

    await state.set_state(ReminderStates.waiting_for_name_delete)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å üîí", reply_markup=clear)

@admin_router.message(ReminderStates.waiting_for_name_delete)
async def confirm_deletion(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞‚ùå":
        await state.clear()
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main)
        return

    name_to_delete = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    user_id = str(message.chat.id)
    record_found = False

    if user_id in reminders:
        for reminder in reminders[user_id]["reminders"]:
            if reminder["name"].lower() == name_to_delete.lower():
                reminders[user_id]["reminders"].remove(reminder)
                record_found = True
                break

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π
        if not reminders[user_id]["reminders"]:
            del reminders[user_id]

    if record_found:
        save_reminders(reminders)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await message.answer(f"–ó–∞–ø–∏—Å—å –¥–ª—è {name_to_delete} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=kb.main)
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=kb.main)

    await state.clear()