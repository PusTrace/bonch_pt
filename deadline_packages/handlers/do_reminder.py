from datetime import datetime
import logging

from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext

import deadline_packages.keyboards as kb
from deadline_packages.keyboards import clear
from deadline_packages.states import ReminderStates
from deadline_packages.utils import save_reminders

logging.basicConfig(level=logging.INFO)

do_reminder_router = Router()


@do_reminder_router.message(F.text == '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üìÜ')
async def start_set_reminder(message: types.Message, state: FSMContext):
    user_id = str(message.chat.id)  # ID —á–∞—Ç–∞
    await state.set_state(ReminderStates.waiting_for_name)
    await state.update_data(user_id=user_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å", reply_markup=clear)

@do_reminder_router.message(ReminderStates.waiting_for_name)
async def enter_name(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞‚ùå":
        await state.clear()
        await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=kb.main)
        return

    if not message.text.strip():  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(name=message.text)
    user_data = await state.get_data()
    logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏: {user_data}")

    await state.set_state(ReminderStates.waiting_for_deadline)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú")

@do_reminder_router.message(ReminderStates.waiting_for_deadline)
async def enter_deadline(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞‚ùå":
        await state.clear()
        await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=kb.main)
        return

    try:
        deadline = datetime.strptime(message.text, "%d.%m")
        deadline = deadline.replace(year=datetime.now().year)
        user_data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        user_id = str(message.chat.id)

        print(user_id, user_data["name"], deadline, [0, 1, 2, 3, 7])

        reminders = (user_id, user_data['name'], deadline, [0, 1, 2, 3, 7])

        save_reminders(reminders)
        await state.clear()
        await message.answer(
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {user_data['name']} –Ω–∞ {deadline.strftime('%d.%m')} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=kb.main
        )
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú")

